

char *operator(char *op)
{
    if (op == "+")
    {
        return "ADD"
    }
    elif (op == "-")
    {
        return "SUB"
    }
    *
    /
    ==
    <   LT
    >   GT
    <=  LT
    >=  GT
    
}   


// enum na indexy
enum {
    INT_index
    DBL_index
    STR_index
    INT_ID_index
    ....
}


// enum na switchdexy
enum {
    INT_INT
    DBL_INT
    INT_DBL
    ....
}


int matrix[][] = {
//             INT_index       DBL_index    STR_index   ID_index  
INT_index    { INT_INT, }
DBL_index    { ID_ID    }
STR_index    {          }
ID_index     { INT_ID   }
}


int type(char *param1, char *param2)
{
    if (strncmp(param2, "INT", 3) == 0)
    {
        index_param1 = INT_index
    }
    STR
    DBL
    ID



    return matrix[index_param1][index_param2]
}



void int_int(op, dest, param1, param2)
{

    char param1[10];
    if (strcmp(param1, "INT_ID"))
    {
      strcpy(param1, "LF")
    }
    else
        "int"
    
    if (strcmp(param2, "INT_ID")
        LF
    else
        int

    print(
        "asdada",

        ......
        .....,
        operator(op)
    )

    if (op == "<=")
    {
        print(

        )
    }
    >=
    !=

}


INT_ID


def gen_expr()
{
    switch (type(param1, param2))
    {
        case INT_INT:
            int_int(op, dest, param1, param2)
            break;
        case DBL_INT:
            dbl_int() //
        case INT_DBL:
            dbl_int() // zamena parametrov oproti case nad tym
        case STR_STR:
            str_str()


        default: break;
    }
}




# def gen_statement() -Jindra