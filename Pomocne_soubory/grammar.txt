# SUBOR S DERIVACIAMI

# Pravidla:
# - terminaly nesmu mat: < >
# - neterminaly musia mat: < >
# - derivacia je znazornena sipkou: ->

# STARTING NONTERMINAL = <prog>
<prog>    -> <st-list>

<st-list> -> <stat> <st-list>
<st-list> -> EOL <st-list>
<st-list> -> EOF



<stat>    -> <definition>
<stat>    -> <command>

<command> -> <while-c>
<command> -> <if-c>
<command> -> id = <assignment>
# uvidime este ci tam ma byt EOL
<command> -> <expr> EOL
<command> -> <function-call>

# uvidime este ci tam ma byt EOL
<assignment> -> <expr> EOL 
<assignment> -> <function-call>

# END-LIST
<end-list>  -> <command> <end-list>
<end-list>  -> EOL <end-list>
<end-list>  -> end



# CONDITION
<if-c>     -> if <expr> then EOL <if-list> EOL

<if-list>  -> <command> <if-list>
<if-list>  -> EOL <if-list>
<if-list>  -> elif <expr> then EOL <if-list>
<if-list>  -> else EOL <end-list>
<if-list>  -> end



# ITERATION
<while-c>    -> while <expr> do EOL <end-list> EOL



# FUNCTION DEFINITION
<definition> -> def <id-func> <params-gen> <end-list> EOL
<id-func>    -> id
<id-func>    -> func


# FUNCTION PARAMETERS
<params-gen> -> <p-brackets>
<params-gen> -> <p-without>
<params-gen> -> EOL

<p-brackets>          -> ( <p-inside-brackets> 
<p-inside-brackets>   -> <id> <p-brackets-continue> 
<p-inside-brackets>   -> ) EOL

<p-brackets-continue> -> , <id> <p-brackets-continue>
<p-brackets-continue> -> ) EOL

<p-without> -> <id> <p-without-continue>
<p-without-continue> -> , <id> <p-without-continue> 
<p-without-continue> -> EOL



# FUNCTION CALL - je ukoncena EOL z definicie parametrov
<function-call> -> func <params-gen>


# PARAMETERS
<id> -> id
<id> -> str
<id> -> int
<id> -> double