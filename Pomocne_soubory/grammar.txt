# SUBOR S DERIVACIAMI

# Pravidla:
# - terminaly nesmu mat: < >
# - neterminaly musia mat: < >
# - derivacia je znazornena sipkou: ->

# STARTING NONTERMINAL = <st-list>
1.  <st-list> -> <stat> <st-list>
2.  <st-list> -> EOL <st-list>
3.  <st-list> -> EOF

# FUNCTION DEFINITION
4.  <stat>    -> def <id-func> <params-gen> <end-list> EOL
# COMMANDS
5.  <stat>    -> <command>


# ITERATION
# po prijati "while" zapiname precedencnu analyzu na prijatie vyrazu
6.  <command> -> while **expr** do EOL <end-list> EOL

# CONDITION
# po prijati "if" zapiname precedencnu analyzu na prijatie vyrazu
7.  <command> -> if **expr** then EOL <if-list> EOL


##################################################################################
# EXPRESIONS without assignment
# po najdeni nasledujucich tokenov na zaciatku vstupnej pasky (dostaneme zo scanneru) zapiname preced. a. na prijatie vyrazu
# dolezite je ze v tychto pripadoch musime zahrnut aj tieto tokeny do preced. a.

# expr_include: + - FUNC STR INT DBL nil (
# <command> -> **expr_include** EOL

8. <command> -> ID <func-assignment-expr>

# ak pride hocico ine ako = zapiname precedenc analyzu
# musime zahrnut predchadzajuci token (ID) 
# expr_include_two: arithmetic: +, -, *, /  relation: ==, !=, <, <=, >, >=
# 
##################################################################

# END-LIST
9. <end-list>  -> <command> <end-list>
10. <end-list>  -> EOL <end-list>
11. <end-list>  -> end

12. <if-list>  -> <command> <if-list>
13. <if-list>  -> EOL <if-list>
# po prijati "elif" zapiname precedencnu analyzu na prijatie vyrazu
14. <if-list>  -> elif **expr** then EOL <if-list>
15. <if-list>  -> else EOL <end-list>
16. <if-list>  -> end 


# FUNCTION
17. <id-func>    -> ID
18. <id-func>    -> FUNC

# FUNCTION PARAMETERS
19. <params-gen> -> ( <p-brackets> 
20. <params-gen> -> ID <p-without>
21. <params-gen> -> EOL

22. <p-brackets>   -> ID <p-brackets-continue> 
23. <p-brackets>   -> ) EOL

24. <p-brackets-continue> -> , ID <p-brackets-continue>
25. <p-brackets-continue> -> ) EOL

26. <p-without> -> , ID <p-without> 
27. <p-without> -> EOL


# <func-assignment-expr> -> **expr_include_two** EOL
28. <func-assignment-expr> -> = **expr** EOL